// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client" // Explicitly set to the default location
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========= ENUMS =========

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum LessonType {
  VIDEO
  TEXT
  QUIZ
  DPP
  ASSIGNMENT // Keep if distinct from DPP
  EXTERNAL_LINK
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ALL_LEVELS
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DoubtStatus {
  OPEN
  RESOLVED
  CLOSED
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LiveSessionStatus {
  SCHEDULED
  LIVE
  ENDED
  CANCELLED
}

// ========= MODELS =========

// --- User and Profile ---
model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  name              String?
  password          String // Hashed password
  role              Role     @default(STUDENT)
  status            UserStatus @default(ACTIVE)
  emailVerified     DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  profile           UserProfile?
  coursesTeaching   Course[]          @relation("InstructorCourses")
  enrollments       Enrollment[]
  articlesAuthored  Article[]         @relation("AuthorArticles")
  reviews           Review[]
  quizSubmissions   QuizSubmission[]
  dppSubmissions    DPPSubmission[]
  doubtsPosted      Doubt[]           @relation("StudentDoubts")
  doubtsAssigned    Doubt[]           @relation("InstructorAssignments")
  doubtMessagesSent DoubtMessage[]    @relation("SenderMessages")
  orders            Order[]
  notifications     Notification[]    @relation("UserNotifications")
  progress          UserProgress[]
  liveSessionsHosted LiveSession[]    @relation("InstructorLiveSessions")
  qnaItems          Qna[]

  @@map("users")
}

model UserProfile {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio          String?  @db.Text
  avatarUrl    String?
  headline     String?
  websiteUrl   String?
  socialLinks  Json?
  experience   Json?
  education    Json?
  projects     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("user_profiles")
}

// --- Courses, Modules, Lessons ---
model Course {
  id            Int           @id @default(autoincrement())
  title         String
  slug          String        @unique
  description   String        @db.Text
  thumbnailUrl  String?
  price         Float         @default(0.0)
  instructorId  Int
  instructor    User          @relation("InstructorCourses", fields: [instructorId], references: [id])
  categoryId    Int?
  category      Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  status        ContentStatus @default(DRAFT)
  difficulty    Difficulty    @default(ALL_LEVELS)
  language      String        @default("English")
  isFeatured    Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  modules       Module[]
  enrollments   Enrollment[]
  reviews       Review[]
  orders        Order[]
  doubts        Doubt[]       @relation("CourseDoubts")
  liveSessions  LiveSession[] @relation("CourseLiveSessions")
  qnaItems      Qna[]

  @@index([instructorId])
  @@index([categoryId])
  @@map("courses")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  description String?   @db.Text
  icon        String?
  courses     Course[]
  articles    Article[] @relation("ArticleCategory") // This relation is for Category -> Article

  @@map("categories")
}

model Module {
  id        Int      @id @default(autoincrement())
  title     String
  order     Int
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, order])
  @@index([courseId])
  @@map("modules")
}

model Lesson {
  id              Int        @id @default(autoincrement())
  title           String
  slug            String?    @unique
  content         String?    @db.Text
  videoUrl        String?
  videoDuration   Int?
  type            LessonType @default(TEXT)
  order           Int
  moduleId        Int
  module          Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  isFreePreview   Boolean    @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  quiz            Quiz?
  dpp             DPP?
  attachments     Attachment[]
  userProgress    UserProgress[]
  doubts          Doubt[]    @relation("LessonDoubts")
  qnaItems        Qna[]

  @@unique([moduleId, order])
  @@index([moduleId])
  @@map("lessons")
}

model Quiz {
  id           Int        @id @default(autoincrement())
  title        String
  lessonId     Int        @unique
  lesson       Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  passingScore Float?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  questions    Question[] @relation("QuizQuestions")
  submissions  QuizSubmission[]

  @@map("quizzes")
}

model Question {
  id            Int      @id @default(autoincrement())
  text          String   @db.Text
  type          String
  options       Json?
  correctAnswer Json
  explanation   String?  @db.Text
  quizId        Int
  quiz          Quiz     @relation("QuizQuestions", fields: [quizId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([quizId])
  @@map("quiz_questions")
}

model QuizSubmission {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId      Int
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     Json
  score       Float?
  passed      Boolean?
  submittedAt DateTime @default(now())

  @@unique([userId, quizId])
  @@index([userId])
  @@index([quizId])
  @@map("quiz_submissions")
}

model DPP {
  id          Int       @id @default(autoincrement())
  title       String
  description String?   @db.Text
  content     String?   @db.Text
  lessonId    Int       @unique
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  submissions DPPSubmission[]

  @@map("dpps")
}

model DPPSubmission {
  id               Int      @id @default(autoincrement())
  userId           Int
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dppId            Int
  dpp              DPP      @relation(fields: [dppId], references: [id], onDelete: Cascade)
  submittedContent String?  @db.Text
  fileUrl          String?
  originalFileName String?
  submittedAt      DateTime @default(now())
  feedback         String?  @db.Text
  grade            Float?

  @@index([userId])
  @@index([dppId])
  @@map("dpp_submissions")
}

model Attachment {
  id        Int      @id @default(autoincrement())
  name      String
  fileUrl   String
  fileType  String?
  fileSize  Int?
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([lessonId])
  @@map("attachments")
}

model Enrollment {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    Int
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt  DateTime  @default(now())
  completedAt DateTime?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("enrollments")
}

model UserProgress {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId    Int
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completed   Boolean  @default(false)
  completedAt DateTime?

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
  @@map("user_progress")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?  @db.Text
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("reviews")
}

// --- Articles ---
model Article {
  id             Int           @id @default(autoincrement())
  title          String
  slug           String        @unique
  content        String        @db.Text
  excerpt        String?       @db.Text
  thumbnailUrl   String?
  authorId       Int
  author         User          @relation("AuthorArticles", fields: [authorId], references: [id])
  categoryId     Int?
  category       Category?     @relation("ArticleCategory", fields: [categoryId], references: [id], onDelete: SetNull)
  status         ContentStatus @default(DRAFT)
  publishedAt    DateTime?
  readTime       Int?
  isFeatured     Boolean       @default(false)
  viewCount      Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // ========= CHANGES FOR STEP 1 (Temporary Schema) START =========
  // This field maps to your EXISTING 'tags' column in the database which holds String[] data.
  // Ensure 'String[]?' matches the type and nullability of your existing column.
  old_tags_data  String[]      @map("tags")

  // This is the NEW relation to the Tag model, using a TEMPORARY name for the field and relation.
  new_tags_relation Tag[]        @relation("ArticleTags_NewRelation")
  // ========= CHANGES FOR STEP 1 (Temporary Schema) END ===========

  @@index([authorId])
  @@index([categoryId])
  @@map("articles")
}

model Doubt {
  id                   Int         @id @default(autoincrement())
  title                String
  description          String      @db.Text
  userId               Int
  user                 User        @relation("StudentDoubts", fields: [userId], references: [id], onDelete: Cascade)
  courseId             Int?
  course               Course?     @relation("CourseDoubts", fields: [courseId], references: [id], onDelete: SetNull)
  lessonId             Int?
  lesson               Lesson?     @relation("LessonDoubts", fields: [lessonId], references: [id], onDelete: SetNull)
  status               DoubtStatus @default(OPEN)
  assignedInstructorId Int?
  assignedInstructor   User?       @relation("InstructorAssignments", fields: [assignedInstructorId], references: [id], onDelete: SetNull)
  tags                 String[]    @default([]) // This is for Doubt tags, separate from Article tags.
  isResolvedByAI       Boolean     @default(false)
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  messages             DoubtMessage[]

  @@index([userId])
  @@index([courseId])
  @@index([lessonId])
  @@index([assignedInstructorId])
  @@map("doubts")
}

model DoubtMessage {
  id      Int      @id @default(autoincrement())
  doubtId Int
  doubt   Doubt    @relation(fields: [doubtId], references: [id], onDelete: Cascade)
  userId  Int
  user    User     @relation("SenderMessages", fields: [userId], references: [id])
  content String   @db.Text
  sentAt  DateTime @default(now())
  isBot   Boolean  @default(false)

  @@index([doubtId])
  @@index([userId])
  @@map("doubt_messages")
}

model Order {
  id                Int         @id @default(autoincrement())
  userId            Int
  user              User        @relation(fields: [userId], references: [id])
  courseId          Int?
  course            Course?     @relation(fields: [courseId], references: [id])
  amount            Float
  currency          String      @default("INR")
  status            OrderStatus @default(PENDING)
  paymentGateway    String?
  transactionId     String?     @unique
  razorpayOrderId   String?     @unique
  razorpayPaymentId String?     @unique
  razorpaySignature String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([userId])
  @@index([courseId])
  @@map("orders")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@map("notifications")
}

model Testimonial {
  id          Int      @id @default(autoincrement())
  quote       String   @db.Text
  authorName  String
  authorTitle String?
  avatarUrl   String?
  courseId    Int?
  isVisible   Boolean  @default(true)
  createdAt   DateTime @default(now())

  @@map("testimonials")
}

model PlatformSetting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String   @db.Text
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("platform_settings")
}

model LiveSession {
  id           Int               @id @default(autoincrement())
  title        String
  description  String?           @db.Text
  courseId     Int?
  course       Course?           @relation("CourseLiveSessions", fields: [courseId], references: [id], onDelete: SetNull)
  instructorId Int
  instructor   User              @relation("InstructorLiveSessions", fields: [instructorId], references: [id])
  startTime    DateTime
  endTime      DateTime?
  streamUrl    String?
  status       LiveSessionStatus @default(SCHEDULED)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@index([courseId])
  @@index([instructorId])
  @@map("live_sessions")
}

model Qna {
  id        Int     @id @default(autoincrement())
  text      String  @db.Text
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  Int
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessonId  Int?
  lesson    Lesson? @relation(fields: [lessonId], references: [id], onDelete: SetNull)

  parentId  Int?
  parent    Qna?    @relation("QnaReplies", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies   Qna[]   @relation("QnaReplies")

  isMarkedAsAnswer Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([courseId, createdAt(sort: Desc)])
  @@index([lessonId, createdAt(sort: Desc)])
  @@index([parentId])
  @@map("qna_items")
}

// ========= NEW Tag MODEL AND CHANGES FOR STEP 1 (Temporary Schema) START =========
model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  // This is the back-relation using the TEMPORARY relation name
  articles  Article[] @relation("ArticleTags_NewRelation")
  createdAt DateTime  @default(now())
  @@map("tags") // Ensures the new table is named 'tags'
}
// ========= NEW Tag MODEL AND CHANGES FOR STEP 1 (Temporary Schema) END ===========